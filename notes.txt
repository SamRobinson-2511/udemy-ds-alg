Big O Cheatsheet:

O(1): constant, no loops
O(n): linear, for and while loops
O(n^2): quadratic, every element in collection needs to be compared to every other element. two nested loops
O(n!): factorial, adds loop for every element 


**Iterating through half a collection is still O(n)
**Two separate collections: O(a * b)


Causes of time: 
1. Operations
2. Comparisons
3. Looping (for, while)
4. Outside function call 

Rules: 
1. Always worst case
2. Remove Constants
3. Different inputs should have different variables:
    +: for steps in order
    *: for nested steps
4. Drop non-dominant terms 

Three pillars of code: 
1. Readability 
2. Speed: time complexity
3. Memory: space complexity

Causes of space complexity: 
1. Adding variables 
2. Data structures
3. Function calls
4. Allocations


1. Analytical Skills
2. Coding Skills
3. Technical Skills
4. Communication Skills

Data structures:
- Arrays 
- Stacks 
- Queues
- Linked Lists
- Trees 
- Tries 
- Graphs 
- Hash Tables 

Algorithms: steps or processes to manipulate collections of items
- Sorting 
- Dynamic Programming
- BFS + DFS (Searching)
- Recursion


62. Data structure
- collection of values 
- each specialized for its own thing 
- way to organize data 
- blockchain 
- arrays + objects
- always trade-offs

63. How computers store data: 
- CPU
- RAM: stores variables, volatile
- Storage: video, music, documents, persistent, slow 

RAM: 
- addresses: each holds 8 bits (1 BYTE) 
- BIT: tiny electrical switch
- CPU asks RAM through memory controller explicitly 
- can access bits at any random address in memory really quickly 
- CPU cache: has tiny memory for recent items 

Data Structures: way to store information 
- Integers stored in 32 or 64 bits 
- JS: integer overflow
-- 64 bit float not Integers
- arrangement of data in RAM


JS DataTypes: 
- arrays 
- objects
- can build our own data structures regardless of whether the language supports them 


65. Operations on Data Structures:
- each DS has its trade-offs
- insertion
- deletion
- traversal: access each data item once 
- searching 
- sorting 
- access 

66. Arrays Introduction: 
- lookup = O(1) - constant time
- push = O(1) - constant time
- insert = O(n) - linear time
- delete = O(n) - constant time 

- smallest footprint of any data structure 


67. Static v. Dynamic Arrays:
- Static: array fixed in size 
- arrays allocated in adjacent blocks of memory 
- Dynamic: allows us to copy and store in new location 


69. Classes in JavaScript
- Reference type: non-primitive type
--- Objects
- Context: where we are in the object 
- scope created with curly brackets
- this => what is the object environment right now 


Arrays: 
- Fast lookups
- Fast push / pop
- Ordered 

- Slow inserts 
- Slow deletes 
- Fixed size if using static array 

Hash tables: 
- Objects in JS are hash tables 
- One of a common interview question

Key: used as index where to find value in memory 
- hash function places key with value in memory

Hash function: function that generates a value of fixed length for each input 
- md5: 
- one way
- idempotent: a function given an input is outputting the same 
=> fast data access 
=> converts to index / address space 
=> hash function slows things down 
=> implemented with optimum hashing function 
- sha-256: used in cryptography 
key -> hash function -> memory address 
- assume O(1)


80. Hash Collisions: 
-> insert : O(1)
-> lookup : O(1)
-> delete : O(1)
-> search : O(1)

Problems: 
- collision: can't be 
- buckets
- overflow:


Key and Value can be any type of data structure 
- ES6: 
-> Map
--> allows to save any data type as a key 
--> maintains insertion order
-> Sets
--> saves keys not values 

86. 

Arrays: 
- search = O(n)
- lookup = O(1)
- push* = O(1)
- insert = O(n)
- delete = O(n)


Hash Tables: let us use flexible keys 
- search = O(1) //use in databases
- insert = O(1)
- lookup = O(1)
- delete = O(1)

87. 


